==== MS Key Concepts ====================
Isolation ( Isolate Everything !) - Code Simplicity- Services, Teams, Scalability
Distributed System 
Single Responsibility (Single-responsiblity principle)
Always oriented around business or domain capabilities or facts.
It is a journey (constant evolution) -> Evolutionary Architectures.
Loose-Coupling and high cohesion
Automate Everything
	Infrstructure as Code
Design and Expect failure
Eventual Consistency
2PC is an anti-pattern
High(and automated) observability
Autonomy (Team Cohesiveness)

Smart end points and dump pipes
https://medium.com/@nathankpeck/microservice-principles-smart-endpoints-and-dumb-pipes-5691d410700f
https://martinfowler.com/articles/microservices.html
https://azure.microsoft.com/en-us/overview/what-is-cloud-computing/
https://dzone.com/articles/challenges-in-implementing-microservices
https://microservices.io/patterns/data/database-per-service.html

observability
https://medium.com/observability/microservices-observability-26a8b7056bb4

Spring boot/cloud
Spring boot
https://spring.io/
https://start.spring.io/
For tool 
https://spring.io/tools
https://spring.io/cloud
https://12factor.net/
https://www.heroku.com/

GIT URL
https://github.com/prabhakarmishra/mschassis.git
https://github.com/prabhakarmishra/MSVirtualSession.git

Agile 
- Go to market is faster
- feedback 
- improve the quality of product/work
Spring cloud config server

Spring Cloud bus refresh end points via postman
http://localhost:8001/actuator/bus-refresh

http://localhost:8021/hystrix/
http://localhost:8021/actuator/hystrix.stream

service discovery
https://microservices.io/patterns/service-registry.html

https://spring.io/reactive
https://spring.io/projects/spring-cloud-circuitbreaker#samples

https://zipkin.io/

https://www.ibm.com/cloud/learn/virtualization-a-complete-guide

https://www.ibm.com/cloud/learn/containerization

https://www.redhat.com/en/topics/cloud-computing/cloud-vs-virtualization

https://cognitiveclass.ai/courses/docker-essentials

https://medium.com/@shiranm/json-web-token-with-symmetric-and-asymmetric-encryption-b43f97a48b32

------------------------------------
-  Agility
-  Availability
-  Resilency 
-  Scalability

MS 2 important part
- Automation
- DevOps


API Gateway
IBM api connect
Google - apigee
-------------
Service mess
ISTIO - opensource
Antos - google 

=========================================================

Q: What is cloud ?
----------------------------------------------------------------------------------------------------
compute - processor
memory - RAM
storage - disk/ssd
operating system 
network
 == server
 + server
 + server
 + server 
 
  == Data Center
	Costs
		- Facility Costs
		- Infrastructure Costs
		- Maintenance costs
		- Power costs
		- Cooling Fans
		- Personel
		- Patching

Cloud 
- 8 AM - 11 AM - 10000000 hit  - 80% 
- 11 AM - 1 PM - 1000000 hit  - 30-40%
- 1 PM - 3 PM - 500000 hit  - 25- 30%
- 3 PM - 6 PM - 400000 hit - 20%
- 6 PM - 9 PM - 5000000 hit - 30-40 %
- 9 PM - 7:30 AM - 100000 hit - 10%
		
Amazon Web Services 
	- hypervisor - Software Defined Hosts.
	- Virtal hosts - VMs (Virtal Machines) - Usage can be monitored 
	- IaaS , SaaS, PaaS , *aaS
	- Cloud Providers 
		Infinite access to servies , over internet , using a controlled usage based cost model.
		everything is code (like infrastructure)
	- Pay as use


 
 
Webex Recoding 
Monday, April 13, 2020  |  12:02 am  |  Eastern Daylight Time (New York, GMT-04:00)  
Duration: 7 hr 7 min 44 sec  
Recording password: 2wGJ5UWu  
https://ibm.webex.com/ibm/ldr.php?RCID=2e7b9b9cee2a4676a900b8c226c4a24d

Tuesday, April 14, 2020  |  12:01 am  |  Eastern Daylight Time (New York, GMT-04:00) 
Duration: 7 hr 18 min 51 sec 
Recording password: xUzhkDW8 
https://ibm.webex.com/recordingservice/sites/ibm/recording/playback/d4f78d452b9f4230ba8b4d7157855137

Wednesday, April 15, 2020  |  12:01 am  |  Eastern Daylight Time (New York, GMT-04:00)  
Duration: 7 hr 57 min 6 sec  
Recording password: Jxwi8bwy
https://ibm.webex.com/recordingservice/sites/ibm/recording/playback/dd9a3f931af44dcf906e78bf9623a06e

Thursday, April 16, 2020  |  12:01 am  |  Eastern Daylight Time (New York, GMT-04:00)  
Duration: 5 hr 7 min 29 sec  
Recording password: 5jHcrmF6 
https://ibm.webex.com/ibm/ldr.php?RCID=f131e2acb9c944bfaf50fd2eff2412de

==========================================================================
Installed software
- STS (editor)
- JAVA
- MAVEN

Environment variable
- JAVA_HOME
- MAVEN_HOME


Service registry Microservices - A - What is required to run this MS
- Maven
- JDK
- LIB 
- APP - (code, property file, dependent file)

- Image

dockerfile - which give instruction 


All coding practice - 3 days MS in Spring boot
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.


docker-machine ls
docker ps
docker start docker-vm1
docker-machine start docker-vm1
docker-machine env docker-vm1
@FOR /f "tokens=*" %i IN ('docker-machine env docker-vm1') DO @%i
docker-machine ls
cd docker
C:\Users\w2cluster99\ksr\mschassis-master\docker>startchassis.bat
and select Y for zipkin and rabbitMQ

(if required to create the vm)
docker-machine create -d "virtualbox" --virtualbox-memory "1024" docker-vm3

https://hub.docker.com/?ref=login
docker ps
docker images
docker pull nginx:latest
docker run -d nginx
docker run -d -p 80:80 --name mynginx nginx
echo %docker_host%
docker images ls

docker container kill 5c13c97e9e23
docker container stop 1696a8e642f8 91ab8776b340
docker ps -a
docker exe -it mynginx /etc/bin // run a command in container, in this case would present a shell.
docker container rm e7e09d318ed9
docker container kill e7e09d318ed9
docker-machine create -d "virtualbox" docker-vm3


build the application using maven - go to path of package and then run the below command
mvn clean package -DskipTests


https://hub.docker.com/?ref=login
docker ps
docker images
docker pull nginx:latest
docker run -d nginx
docker run -d -p 80:80 --name mynginx nginx
echo %docker_host%
docker run --name tt -p 8080:80 tutum/hello-world
docker ps

docker container kill 5c13c97e9e23
docker container stop 1696a8e642f8 91ab8776b340
docker ps -a
docker exe -it mynginx /etc/bin // run a command in container, in this case would present a shell.
docker container rm e7e09d318ed9
docker container kill e7e09d318ed9
docker-machine create -d "virtualbox" docker-vm3

docker build -t prabhakarm/configserverkol:1 .
docker image | grep kol
docker run -p 8888:8888 -d --name config --network ms-chassis-nw prabhakarm/configserverkol:1
docker build -t prabhakarm/eurekakol:1 .
docker run -p 8761:8761 -d --name eureka --network ms-chassis-nw prabhakarm/eurekakol:1
docker build -t prabhakarm/cloudapigatewaykol:1 .
docker run -p 80:9092 -d --name cloudapigateway --network ms-chassis-nw prabhakarm/cloudapigatewaykol:1
docker build -t prabhakarm/discountmskol:1 .
docker run -d --name discoutmskol --network ms-chassis-nw prabhakarm/discountmskol:1
docker build -t prabhakarm/productmskol:1 .
docker run -d --name productmskol --network ms-chassis-nw prabhakarm/productmskol:1 .

Command Push the images in docker hub
docker push prabhakarm/configserverkol:1


zipkin url
http://192.168.99.100:9411/zipkin/
change the url in code of zipkin url
http://192.168.99.100:15672/
guest/guest

- git part needs to check
- all code needs to checkin

Entry in Host file
C:\Windows\System32\drivers\etc  - host file
192.168.99.100 rabbitmq-master
192.168.99.100 zipkin
192.168.99.100 mysql
192.168.99.100 eureka-1
192.168.99.100 configserver


=======K8S======================
https://landscape.cncf.io/
minikube ( dev )
minishift ( OpenShift 1 worker and 1 master)
https://kubernetes.io/docs/home/
https://www.katacoda.com/

kubectl create ns demo
kubectl run nginx --image=nginx --replicas=5 -n demo
kubectl get pods -n demo

kubectl get events -n demo

kubectl get events -n demo
kubectl get events -n demo -w

kubectl get deployment -n demo
kubectl scale deployment nginx --replicas=1 -n demo

kubectl version
kubectl version --short

kubectl config view

t all nodes on Virtual VM
Login to all nodes and execute the following....
sudo swapoff -a

On Master
1. sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
2. cat /home/master/.kube/config
3. kubectl get nodes
if still getting the issue then below command
    sudo -i
    swapoff -a
    exit
    strace -eopenat kubectl version
	
	
kubectl get secrets

kubectl describe secret <default token>

4. 
	kubectl apply -f admin-user.yaml
	kubectl describe sa admin-user -n kube-system
	kubectl describe secret admin-user-token-gm7rn -n kube-system
	



5. Copy the token.

On Windows Hosts
kubectl config set-cluster <cluster-name> --insecure-skip-tls-verify=true --server=https://<master-ip>:6443
kubectl config set-credentials <crednam> --token=<copied token from master>
kubectl config set-context <context-name> --cluster=<cluster-name> --user=<crednam> 
kubectl config use-context <context-name>

kubectl get nodes

https://cdn2.hubspot.net/hubfs/1665891/Assets/Kubernetes%20Security%20-%20Operating%20Kubernetes%20Clusters%20and%20Applications%20Safely.pdf?t=1538587424944&_hsenc=p2ANqtz-_7jbqtRATdJAm7eFxtd5u4nVLYuIlrF67z5qbslZ10-I63-RZ4ogqu9iuuEMsx7fskPYWww2jDpVjOvrLs

============== Run the Case Study =============================
Go to mschassis/k8s/rabbitmq

kubectl apply -f rabbitmq-dep-w-k8s.yaml
kubectl apply -f rabbitmq-dep-k8s.yaml
kubectl apply -f rabbitmq-svc-k8s.yaml


Go to mschassis/zipkin
kubectl apply -f zipkin-dep-k8s.yaml
kubectl apply -f zipkin-svc-k8s.yaml

kubectl apply -f configserver-dep-k8s.yaml
kubectl apply -f configserver-svc-k8s.yaml
... once config server runs ...
kubectl apply -f eureka-dep-k8s.yaml
kubectl apply -f eureka-svc-k8s.yaml

kubectl apply -f cloudapigateway-dep-k8s.yaml
kubectl apply -f cloudapigateway-svc-k8s.yaml

kubectl apply -f discountms-dep-k8s.yaml

kubectl apply -f productms-dep-k8s.yaml
=======================

https://micrometer.io/




=======================================================
1. One spring boot application 


1. Create the kubernates cluster with 3 nodes
2. spring boot application
https://github.com/prabhakarmishra/spring-boot-lazy-init-example

endpoing would be : http://localhost:8080/lazy

3. git clone https://github.com/prabhakarmishra/spring-boot-lazy-init-example
cd spring-boot-lazy-init-example
ls -ltr
4. ./mvnw clean install
 cd target
java -jar spring-boot-lazy -- snapshot.jar
(snapshot was created after build and install)
5. go to webpreview and see the application working or not
 /lazy check the application working or not
6. lets create the images and store in google registry
7. it will run from init-exmaple directory
command is below
- gcloud projects list - change the below command projectid based on define your project
 ./mvnw com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-exmaple:v1

once image created it will story in google registry with version

8. lets login in google cluster with giving the credentials with zone details

gcloud config set project dark-sensor-273013
gcloud container clusters get-credentials mycluster --zone us-central1-c 	 	
9. kubectl get pods
 kubectl get services
 kubectl get deployment 
10. check the docker
Copy the imagename from container registry
11. docker run -ti --rm -p 8080:8080 gcr.io/dark-sensor-273013/spring-boot-exmaple:v1
12. kubectl run spring-boot-exmaple --image=gcr.io/dark-sensor-273013/spring-boot-example:v1 --port 8080
13. check the deployment
kubectl get deployment
kubectl get pods
kubectl get services
14. expose the service via loadbalancer
kubectl expose deployment spring-boot-example --type=LoadBalancer
kubectl get services
15. check the external ip and access the application via external IP
16. it is in 1 pod as of now. lets scale the pods
17. kubectl scale deployment spring-boot-example --replicas=3
18. kubectl get pods










